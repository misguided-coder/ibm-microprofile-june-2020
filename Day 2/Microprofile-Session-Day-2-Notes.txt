Rules
1) Keep yourself on mute if required unmute and speak
2) We can speak via chat or voice command in case of questions/doubts
3) Make session as intercative as possible by asking questions
4) 3 breaks for Morning Tea 11:00 for 15 minutes ,1:10 for 50 mitnues,4:00 for 15 minutes very very strictly
5) Be honest while learing remotely by attending very actively, do not be passive

Methodology
20% time will be spent on explaing theary and concepts
80% time will be spent on writing demos and examples
 
Open Liberty Microprofile (3.3) Features
[appSecurity-2.0, cdi-2.0, concurrent-1.0, distributedMap-1.0, jaxrs-2.1, jaxrsClient-2.1,
   jndi-1.0, json-1.0, jsonb-1.0, jsonp-1.1, jwt-1.0, microProfile-3.3, monitor-1.0, 
  mpConfig-1.4, mpFaultTolerance-2.1, mpHealth-2.2, mpJwt-1.1, mpMetrics-2.3, mpOpenAPI-1.1, 
  mpOpenTracing-1.3, mpRestClient-1.4, opentracing-1.3, servlet-4.0, ssl-1.0]
   
Eclipse MicroProfile short form - MP

Plan for the day
1) JAX-RS API - all concepts for buidling MS - GET,POST,PUT,DELETE,PathParam,QueryParam
2) JSON-P API - all concepts for buidling MS
3) JSON-B API - all concepts for buidling MS
4) CDI API - all concepts for buidling MS
5) MP Config API - all concepts for configuring MS from external sources
6) MP REST Client API - all concepts for buidling Type Safe clients for MS
7) Building MS application involving multiple MSs
8) MS-MS communication using MP REST Client
9) MP Open API - all concepts for generating MS documentation

Recap for DAY 1

JEE 8 
   - future development was stopped by Oracle and JEE 8 was donated to Eclipse under project name 
     called "Jakarta" 
         - JAX-RS, JSONP,JSONB,CDI - MicroProfile

Q) What is the need for Eclipse MicroProfile, when we have other tools in Java for building MS?

Q) Tell me the name of 3 implementations where I can deploy MS built using MP?

Q) Why JAX-RS is chosen as a primary standard for building MS by MP team?

Q) How MP REST Client differs from JAX-RS based client?

JSON-P API (Processing)
   - is an API designed by Java Team as a standard API to work with json data in Java
   - is part of JEE 7
   - crate,read,write,parse,query json data is Java language
   - will take you away from lots of vender specific APIs available in market to work 
     with json using Java i.e. GSON,Jettison,Jackson,JSONParser etc..
   - Json,JsonObject,JsonObjectBuilder,JsonArray,JsonArrayBuilder,JsonReader,JsonWriter,JsonConfig
   
JSON
   -  json has only 2 data structure
   -  object {k:v,k:v,k:v}
   -  array [v,v,v,v,v,v]
   -  complex [v,[],v,{},{k:[v,v,v],k:v,k:{k:v,k:v}}]

JSON-B API (Binding)
   - is an API designed by Java Team as a standard API to work with json data in Java
   - is part of JEE 8
   - high level API to work with json data like JDBC is low level and JPA is high level
   - bind Java POJO to json and vice-versa
   - supports many annotations to customize binding behaviour
   - easy to use and less code to write
   - Jsonb,JsonbBuilder,JsonbProperty,JsonbTransient,JsonbNillable 

Sample Valid Json String 
  {\"id\": 1003,\"place\": \"New Delhi\",\"rooms\": 600,\"title\": \"Holiday Inn\"}


CDI API 
  - Context and Dependency Injection
  - is standard API designed by Java Team under JEE 5 to manage bean dependencies
  - is supported by many web and other containers
  - will keep you away from vendor lockin while using DI feature in Java applications
  - is used mainly to make application components loosly coupled
  - no more "new" operator in the entire code
  - bean object creation and destruction is taken care by the environment/container in which
    application is deployed/running
  - having a major support in lots of frameworks and runtime environments today
  - supports field,setter,constructor injection
  - any bean/pojo can be deployed inside the container using standard configuration file
    "beans.xml" or using annotations
  - Injections,Scopes,Life Cycles,Decorators,Manually using container,Qualifiers

Q) what is DI?

Q) which DI container you have used in the past, name it?
 
Q) Can i expect that you know and have used DI in the past?

Q) Name 5 DI containers?
   PicoContainer, JBoss SEAM, Spring IoC/DI Container, Guice, 
   JSF 2 Container, EJB 3 Container, JPA Container, Struts 2 Container etc..

CDI concept qualifier
   -  used to mark an implementation of an interface for unique identification at run time
   -  used for the purpose of name based injection, rather then by type injection
   -  is used to provide a unique name to the bean
   -  qualifier provided unique name to a bean 
   -  qualifier is type safe to use at runtime
   -  technically qualifier is an annotation
   -  developer has to first create qualifier custom annotation before using it
  
Q) how to create custom annotation in Java 5?
Q) annotation has how many retention policies?
Q) annotation has how many target?


Exercise 1) 
   Create following 2 services as 
   a) FrontDeskService (will run on port 7001 in a seperate OpenLiberty runtime)
	  Room
              type - luxury,statndrd,suite,family
              count
     	- List<Room> checkRoomAvailability(Room room)  /api/frontdesk/check
                       - use MP REST Client API to make a call to RoomBookingService
   b) RoomBookingService (will run on port 7002 in a seperate OpenLiberty runtime)
              - List<Room> roomsAvailable(Room room) /api/room
                        
 
   Purpose of the exercise is 
		- MS to MS communication  
		- utilizing Type Safe MP REST Client


Preparation for Day 4
   - Java 8 Lambda Expression
   - Java 8 Streams
                - filter,foreach,map,collect,reduce
   - Java 10 Flow API for Reactive proframming using reactive streams              
   - Message Broker

      












